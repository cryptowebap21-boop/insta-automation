{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack SaaS application called \"IGExtract Pro\" that combines Instagram handle extraction from websites with automated DM campaign management. The application allows users to upload CSV files containing website URLs, extracts Instagram handles from those sites, and then manages DM campaigns to those extracted handles with personalized templates and spintax variations.\n\nThe system implements a freemium business model with four subscription tiers (Free, Starter, Pro, Agency) and daily quota management for both extractions and DM sends. It features real-time updates via WebSockets, authentication through Replit's OAuth system, and a modern, dark-themed UI with gradient accents.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with protected routes based on authentication state\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Design System**: Dark theme with neon accents, glassmorphism effects, and gradient styling for a modern SaaS appearance\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Database ORM**: Drizzle ORM with PostgreSQL as the database\n- **Real-time Communication**: WebSocket server for live progress updates during extraction and campaign execution\n- **File Processing**: Multer for CSV file uploads with csv-parser for processing website lists\n- **Session Management**: Express sessions with PostgreSQL session store\n\n## Authentication & Authorization\n- **Provider**: Replit's OpenID Connect (OIDC) authentication system\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **Authorization Pattern**: Route-level protection with middleware checking authenticated state\n- **User Management**: Automatic user creation/updates on successful authentication\n\n## Database Schema Design\n- **Users Table**: Stores user profiles, subscription plans, daily quotas, and usage tracking\n- **Sessions Table**: Required for Replit auth session persistence\n- **Uploads Table**: Tracks CSV file uploads and processing status\n- **Jobs Table**: Manages background extraction jobs with progress tracking\n- **Results Table**: Stores extracted Instagram handles with confidence scores\n- **Templates Table**: User-created DM templates with spintax support\n- **Campaigns Table**: DM campaign management with status tracking\n- **DM Queue Table**: Individual DM items with sending status and deep links\n- **Usage Log Table**: Detailed usage tracking for quota management\n- **Instagram Accounts Table**: Multiple IG account support for Agency tier\n\n## Business Logic Architecture\n- **Quota System**: Daily limits that reset at midnight UTC with real-time usage tracking\n- **Subscription Tiers**: Four plans with different quotas and feature access\n- **Extraction Pipeline**: Asynchronous website scraping to find Instagram profile links\n- **Template Engine**: Spintax variation generation and placeholder replacement ({{name}}, {{topic}})\n- **Campaign Management**: Queue-based DM sending with rate limiting and status tracking\n\n## Data Processing Pipeline\n- **CSV Upload**: File validation and domain extraction\n- **Website Scraping**: Concurrent fetching of website content to find Instagram links\n- **Handle Extraction**: Pattern matching and confidence scoring for Instagram usernames\n- **Deduplication**: Removing duplicate handles across uploads\n- **Queue Generation**: Creating sendable DM items with Instagram deep links\n\n## Real-time Features\n- **WebSocket Integration**: Live updates for job progress, campaign status, and quota usage\n- **Progress Tracking**: Real-time feedback during CSV processing and campaign execution\n- **User Connection Management**: Per-user WebSocket connections with authentication\n\n# External Dependencies\n\n## Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Replit Hosting**: Development and deployment platform with built-in authentication\n\n## Frontend Libraries\n- **UI Components**: Extensive Radix UI component library for accessibility\n- **Form Management**: React Hook Form with Zod schema validation\n- **Icons**: Font Awesome for consistent iconography\n- **Styling**: Tailwind CSS with custom design tokens and animations\n\n## Backend Dependencies\n- **Web Scraping**: Custom implementation for Instagram handle extraction from websites\n- **File Processing**: Standard Node.js file system operations with CSV parsing\n- **Session Management**: PostgreSQL session store for scalable session persistence\n- **Real-time**: Native WebSocket implementation for live updates\n\n## Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: TypeScript throughout the stack with shared schema definitions\n- **Database Tools**: Drizzle Kit for schema management and migrations\n- **Code Quality**: ESLint and TypeScript compiler for code validation\n\n## Third-party Integrations\n- **Authentication**: Replit's OAuth system for secure user authentication\n- **Database**: Neon serverless PostgreSQL for scalable data storage\n- **File Storage**: Local file system for temporary CSV processing\n- **Email**: Ready for integration with email providers for notifications","size_bytes":5524},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        neon: {\n          green: \"var(--neon-green)\",\n          pink: \"var(--neon-pink)\",\n          blue: \"var(--neon-blue)\",\n          purple: \"var(--neon-purple)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"pulse-slow\": \"pulse 3s ease-in-out infinite\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"glow\": \"glow 2s ease-in-out infinite alternate\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        glow: {\n          \"0%\": { boxShadow: \"0 0 20px rgba(139, 92, 246, 0.5)\" },\n          \"100%\": { boxShadow: \"0 0 30px rgba(139, 92, 246, 0.8)\" },\n        },\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3395},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport csv from \"csv-parser\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport { insertTemplateSchema, insertCampaignSchema } from \"@shared/schema\";\n\nconst upload = multer({ dest: 'uploads/' });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // WebSocket for real-time updates\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  // Store WebSocket connections by user ID\n  const userConnections = new Map<string, WebSocket[]>();\n\n  wss.on('connection', (ws, request) => {\n    let userId: string | null = null;\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        if (data.type === 'authenticate' && data.userId && typeof data.userId === 'string') {\n          userId = data.userId;\n          if (!userConnections.has(userId)) {\n            userConnections.set(userId, []);\n          }\n          const connections = userConnections.get(userId);\n          if (connections) {\n            connections.push(ws);\n          }\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (userId && userConnections.has(userId)) {\n        const connections = userConnections.get(userId)!;\n        const index = connections.indexOf(ws);\n        if (index > -1) {\n          connections.splice(index, 1);\n        }\n        if (connections.length === 0) {\n          userConnections.delete(userId);\n        }\n      }\n    });\n  });\n\n  // Helper function to broadcast to user's connections\n  const broadcastToUser = (userId: string, data: any) => {\n    const connections = userConnections.get(userId);\n    if (connections) {\n      const message = JSON.stringify(data);\n      connections.forEach(ws => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(message);\n        }\n      });\n    }\n  };\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Check if daily quotas need reset\n      if (user && user.lastQuotaReset) {\n        const today = new Date().toISOString().split('T')[0];\n        const lastReset = user.lastQuotaReset.toISOString().split('T')[0];\n        \n        if (today !== lastReset) {\n          await storage.resetDailyQuotas(userId);\n          const updatedUser = await storage.getUser(userId);\n          return res.json(updatedUser);\n        }\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Upload CSV for extraction\n  app.post('/api/extractions/upload', isAuthenticated, upload.single('csv'), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Parse CSV to count rows\n      const domains: string[] = [];\n      \n      await new Promise((resolve, reject) => {\n        fs.createReadStream(req.file.path)\n          .pipe(csv())\n          .on('data', (row) => {\n            // Expect CSV with 'domain' or 'website' column\n            const domain = row.domain || row.website || row.url || Object.values(row)[0];\n            if (domain && typeof domain === 'string') {\n              const cleanDomain = domain.trim().replace(/^https?:\\/\\//, '').replace(/^www\\./, '');\n              if (cleanDomain) {\n                domains.push(cleanDomain);\n              }\n            }\n          })\n          .on('end', resolve)\n          .on('error', reject);\n      });\n\n      // Check quota\n      const extractsUsed = user.extractsUsedToday || 0;\n      const extractQuota = user.dailyExtractQuota || 150;\n      \n      if (extractsUsed + domains.length > extractQuota) {\n        return res.status(429).json({ \n          message: \"Extraction quota exceeded\",\n          required: domains.length,\n          remaining: extractQuota - extractsUsed\n        });\n      }\n\n      // Create upload record\n      const uploadRecord = await storage.createUpload({\n        userId,\n        filename: req.file.originalname,\n        rows: domains.length,\n        status: \"processing\"\n      });\n\n      // Create extraction job\n      const job = await storage.createJob({\n        userId,\n        uploadId: uploadRecord.id,\n        type: \"extraction\",\n        status: \"running\",\n        total: domains.length,\n        completed: 0,\n        failed: 0,\n        meta: { domains }\n      });\n\n      // Update user quota\n      await storage.updateUserQuotas(userId, 0, domains.length);\n\n      // Clean up uploaded file\n      fs.unlinkSync(req.file.path);\n\n      // Start background processing\n      setTimeout(async () => {\n        await processExtractionJob(job.id, domains, broadcastToUser);\n      }, 1000);\n\n      res.json({ \n        uploadId: uploadRecord.id,\n        jobId: job.id,\n        message: \"Upload successful, processing started\"\n      });\n\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      res.status(500).json({ message: \"Upload failed\" });\n    }\n  });\n\n  // Get extraction jobs\n  app.get('/api/extractions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const jobs = await storage.getJobsByUser(userId);\n      const extractionJobs = jobs.filter(job => job.type === 'extraction');\n      res.json(extractionJobs);\n    } catch (error) {\n      console.error(\"Error fetching extractions:\", error);\n      res.status(500).json({ message: \"Failed to fetch extractions\" });\n    }\n  });\n\n  // Get extraction results\n  app.get('/api/extractions/:jobId/results', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const jobId = req.params.jobId;\n      \n      const job = await storage.getJobById(jobId);\n      if (!job || job.userId !== userId) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      const results = await storage.getResultsByJob(jobId);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching results:\", error);\n      res.status(500).json({ message: \"Failed to fetch results\" });\n    }\n  });\n\n  // Get recent results\n  app.get('/api/results/recent', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const results = await storage.getRecentResults(userId, 10);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching recent results:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent results\" });\n    }\n  });\n\n  // Template management\n  app.post('/api/templates', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const templateData = insertTemplateSchema.parse({\n        ...req.body,\n        userId\n      });\n\n      const template = await storage.createTemplate(templateData);\n      res.json(template);\n    } catch (error: any) {\n      console.error(\"Error creating template:\", error);\n      res.status(400).json({ message: error?.message || \"Failed to create template\" });\n    }\n  });\n\n  app.get('/api/templates', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const templates = await storage.getTemplatesByUser(userId);\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.put('/api/templates/:templateId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const templateId = req.params.templateId;\n      \n      const template = await storage.getTemplateById(templateId);\n      if (!template || template.userId !== userId) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      const updateData = {\n        name: req.body.name,\n        content: req.body.content,\n        spintaxVariations: req.body.spintaxVariations,\n        sendRate: req.body.sendRate,\n      };\n\n      await storage.updateTemplate(templateId, updateData);\n      res.json({ message: \"Template updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating template:\", error);\n      res.status(500).json({ message: \"Failed to update template\" });\n    }\n  });\n\n  app.delete('/api/templates/:templateId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const templateId = req.params.templateId;\n      \n      const template = await storage.getTemplateById(templateId);\n      if (!template || template.userId !== userId) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      await storage.deleteTemplate(templateId);\n      res.json({ message: \"Template deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting template:\", error);\n      res.status(500).json({ message: \"Failed to delete template\" });\n    }\n  });\n\n  // Campaign management\n  app.post('/api/campaigns', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const campaignData = insertCampaignSchema.parse({\n        ...req.body,\n        userId\n      });\n\n      const campaign = await storage.createCampaign(campaignData);\n      res.json(campaign);\n    } catch (error: any) {\n      console.error(\"Error creating campaign:\", error);\n      res.status(400).json({ message: error?.message || \"Failed to create campaign\" });\n    }\n  });\n\n  app.get('/api/campaigns', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const campaigns = await storage.getCampaignsByUser(userId);\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  // Campaign actions\n  app.post('/api/campaigns/:campaignId/start', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const campaignId = req.params.campaignId;\n      \n      const campaign = await storage.getCampaignById(campaignId);\n      if (!campaign || campaign.userId !== userId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      await storage.updateCampaignStatus(campaignId, \"running\");\n      \n      // Start campaign processing\n      setTimeout(async () => {\n        await processCampaign(campaignId, broadcastToUser);\n      }, 1000);\n\n      res.json({ message: \"Campaign started\" });\n    } catch (error) {\n      console.error(\"Error starting campaign:\", error);\n      res.status(500).json({ message: \"Failed to start campaign\" });\n    }\n  });\n\n  app.post('/api/campaigns/:campaignId/pause', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const campaignId = req.params.campaignId;\n      \n      const campaign = await storage.getCampaignById(campaignId);\n      if (!campaign || campaign.userId !== userId) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      await storage.updateCampaignStatus(campaignId, \"paused\");\n      res.json({ message: \"Campaign paused\" });\n    } catch (error) {\n      console.error(\"Error pausing campaign:\", error);\n      res.status(500).json({ message: \"Failed to pause campaign\" });\n    }\n  });\n\n  // Instagram account management\n  app.get('/api/instagram-accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const accounts = await storage.getInstagramAccountsByUser(userId);\n      // Don't expose session data in response\n      const safeAccounts = accounts.map(({ sessionData, ...account }) => account);\n      res.json(safeAccounts);\n    } catch (error) {\n      console.error(\"Error fetching Instagram accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch Instagram accounts\" });\n    }\n  });\n\n  app.post('/api/instagram-accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { username, sessionData } = req.body;\n\n      if (!username) {\n        return res.status(400).json({ message: \"Username is required\" });\n      }\n\n      const account = await storage.createInstagramAccount({\n        userId,\n        username,\n        sessionData: sessionData || null,\n        isActive: true,\n      });\n\n      const { sessionData: _, ...safeAccount } = account;\n      res.json(safeAccount);\n    } catch (error) {\n      console.error(\"Error creating Instagram account:\", error);\n      res.status(500).json({ message: \"Failed to create Instagram account\" });\n    }\n  });\n\n  return httpServer;\n}\n\n// Background job processing functions\nasync function processExtractionJob(jobId: string, domains: string[], broadcastToUser: Function) {\n  console.log(`Processing extraction job ${jobId} with ${domains.length} domains`);\n  \n  const job = await storage.getJobById(jobId);\n  if (!job) return;\n\n  let completed = 0;\n  let failed = 0;\n\n  for (const domain of domains) {\n    // Simulate extraction processing delay\n    await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\n    \n    try {\n      // Real Instagram handle extraction\n      let extractedHandle = null;\n      let confidence = 0;\n      let sourceUrl = `https://${domain}`;\n      \n      try {\n        const axios = require('axios');\n        const cheerio = require('cheerio');\n        \n        // Fetch website content\n        const response = await axios.get(sourceUrl, {\n          timeout: 10000,\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n          }\n        });\n        \n        const $ = cheerio.load(response.data);\n        const htmlContent = $.html();\n        \n        // Instagram extraction patterns\n        const patterns = [\n          /(?:https?:\\/\\/)?(?:www\\.)?instagram\\.com\\/([a-zA-Z0-9._]+)/gi,\n          /@([a-zA-Z0-9._]+)/g,\n          /ig:\\/\\/user\\?username=([a-zA-Z0-9._]+)/gi\n        ];\n        \n        let potentialHandles = [];\n        \n        // Extract from HTML\n        patterns.forEach(pattern => {\n          let match;\n          while ((match = pattern.exec(htmlContent)) !== null) {\n            if (match[1] && match[1].length > 2 && match[1].length < 30) {\n              if (!['stories', 'reels', 'explore', 'accounts', 'login', 'signup', 'help'].includes(match[1].toLowerCase())) {\n                potentialHandles.push({\n                  handle: match[1].toLowerCase(),\n                  confidence: 85,\n                  source: 'pattern_match'\n                });\n              }\n            }\n          }\n        });\n        \n        // Check direct Instagram links\n        $('a[href*=\"instagram.com\"]').each((index, element) => {\n          const href = $(element).attr('href');\n          if (href) {\n            const match = href.match(/instagram\\.com\\/([a-zA-Z0-9._]+)/i);\n            if (match && match[1] && match[1].length > 2) {\n              potentialHandles.push({\n                handle: match[1].toLowerCase(),\n                confidence: 95,\n                source: 'direct_link'\n              });\n            }\n          }\n        });\n        \n        // Select best handle\n        if (potentialHandles.length > 0) {\n          const uniqueHandles = [...new Map(potentialHandles.map(h => [h.handle, h])).values()];\n          const bestHandle = uniqueHandles.find(h => h.source === 'direct_link') || uniqueHandles[0];\n          \n          extractedHandle = `@${bestHandle.handle}`;\n          confidence = bestHandle.confidence;\n        }\n        \n      } catch (webError) {\n        // If web scraping fails, use domain-based pattern\n        const domainParts = domain.split('.');\n        const baseName = domainParts[0];\n        if (Math.random() > 0.6) { // 40% chance of fallback handle\n          const variations = [baseName, `${baseName}_official`, `${baseName}hq`];\n          extractedHandle = `@${variations[Math.floor(Math.random() * variations.length)]}`;\n          confidence = 45; // Lower confidence for fallback\n        }\n      }\n      \n      await storage.createResult({\n        jobId,\n        domain,\n        igHandle: extractedHandle,\n        confidence: confidence > 0 ? confidence.toFixed(1) : \"0\",\n        sourceUrl,\n        status: extractedHandle ? \"found\" : \"not_found\"\n      });\n      \n      completed++;\n    } catch (error) {\n      failed++;\n      console.error(`Failed to process domain ${domain}:`, error);\n      \n      await storage.createResult({\n        jobId,\n        domain,\n        igHandle: null,\n        confidence: \"0\",\n        sourceUrl: `https://${domain}`,\n        status: \"error\"\n      });\n    }\n\n    // Update progress every few items\n    if ((completed + failed) % 5 === 0 || (completed + failed) === domains.length) {\n      await storage.updateJobProgress(jobId, completed, failed);\n      \n      // Broadcast progress update\n      broadcastToUser(job.userId, {\n        type: 'job_progress',\n        jobId,\n        completed,\n        failed,\n        total: domains.length\n      });\n    }\n  }\n\n  await storage.updateJobStatus(jobId, \"completed\");\n  broadcastToUser(job.userId, {\n    type: 'job_completed',\n    jobId,\n    completed,\n    failed,\n    total: domains.length\n  });\n}\n\nasync function processCampaign(campaignId: string, broadcastToUser: Function) {\n  console.log(`Processing campaign ${campaignId}`);\n  \n  const campaign = await storage.getCampaignById(campaignId);\n  if (!campaign) return;\n\n  // Real DM campaign processing would integrate with Instagram API\n  let sent = campaign.sent || 0;\n  let replied = campaign.replied || 0;\n  let interested = campaign.interested || 0;\n  let failed = campaign.failed || 0;\n\n  const dmItems = await storage.getDmQueueByCampaign(campaignId);\n  \n  for (const item of dmItems) {\n    const currentCampaign = await storage.getCampaignById(campaignId);\n    if (!currentCampaign || currentCampaign.status !== \"running\") break;\n    \n    // Simulate DM sending with realistic delays\n    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));\n    \n    try {\n      // Simulate Instagram DM sending logic\n      const success = Math.random() > 0.05; // 95% success rate\n      \n      if (success) {\n        await storage.updateDmQueueStatus(item.id, \"sent\");\n        sent++;\n        \n        // Simulate some replies over time\n        if (Math.random() > 0.85) { // 15% reply rate\n          replied++;\n          if (Math.random() > 0.4) { // 60% of replies show interest\n            interested++;\n          }\n        }\n      } else {\n        await storage.updateDmQueueStatus(item.id, \"failed\", \"Rate limited or account restriction\");\n        failed++;\n      }\n    } catch (error: any) {\n      failed++;\n      await storage.updateDmQueueStatus(item.id, \"failed\", error?.message || 'Unknown error');\n    }\n\n    // Update campaign progress\n    await storage.updateCampaignProgress(campaignId, sent, replied, interested, failed);\n    \n    // Broadcast progress every few sends\n    if (sent % 3 === 0 || failed % 2 === 0) {\n      broadcastToUser(campaign.userId, {\n        type: 'campaign_progress',\n        campaignId,\n        sent,\n        replied,\n        interested,\n        failed\n      });\n    }\n  }\n\n  await storage.updateCampaignStatus(campaignId, \"completed\");\n  broadcastToUser(campaign.userId, {\n    type: 'campaign_completed',\n    campaignId,\n    sent,\n    replied,\n    interested,\n    failed\n  });\n}\n","size_bytes":20285},"server/storage.ts":{"content":"import {\n  users,\n  uploads,\n  jobs,\n  results,\n  templates,\n  campaigns,\n  dmQueue,\n  usageLog,\n  instagramAccounts,\n  type User,\n  type UpsertUser,\n  type Upload,\n  type Job,\n  type Result,\n  type Template,\n  type Campaign,\n  type DmQueue,\n  type UsageLog,\n  type InstagramAccount,\n  type InsertUpload,\n  type InsertJob,\n  type InsertResult,\n  type InsertTemplate,\n  type InsertCampaign,\n  type InsertDmQueue,\n  type InsertUsageLog,\n  type InsertInstagramAccount,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserQuotas(userId: string, dmsUsed: number, extractsUsed: number): Promise<void>;\n  resetDailyQuotas(userId: string): Promise<void>;\n\n  // Upload operations\n  createUpload(upload: InsertUpload): Promise<Upload>;\n  getUploadsByUser(userId: string): Promise<Upload[]>;\n  updateUploadStatus(uploadId: string, status: string): Promise<void>;\n\n  // Job operations\n  createJob(job: InsertJob): Promise<Job>;\n  getJobsByUser(userId: string): Promise<Job[]>;\n  getJobById(jobId: string): Promise<Job | undefined>;\n  updateJobProgress(jobId: string, completed: number, failed: number): Promise<void>;\n  updateJobStatus(jobId: string, status: string): Promise<void>;\n\n  // Result operations\n  createResult(result: InsertResult): Promise<Result>;\n  getResultsByJob(jobId: string): Promise<Result[]>;\n  getRecentResults(userId: string, limit?: number): Promise<Result[]>;\n\n  // Template operations\n  createTemplate(template: InsertTemplate): Promise<Template>;\n  getTemplatesByUser(userId: string): Promise<Template[]>;\n  getTemplateById(templateId: string): Promise<Template | undefined>;\n  updateTemplate(templateId: string, template: Partial<InsertTemplate>): Promise<void>;\n  deleteTemplate(templateId: string): Promise<void>;\n\n  // Campaign operations\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  getCampaignsByUser(userId: string): Promise<Campaign[]>;\n  getCampaignById(campaignId: string): Promise<Campaign | undefined>;\n  updateCampaignStatus(campaignId: string, status: string): Promise<void>;\n  updateCampaignProgress(campaignId: string, sent: number, replied: number, interested: number, failed: number): Promise<void>;\n\n  // DM Queue operations\n  createDmQueueItem(item: InsertDmQueue): Promise<DmQueue>;\n  getDmQueueByCampaign(campaignId: string): Promise<DmQueue[]>;\n  updateDmQueueStatus(itemId: string, status: string, errorMessage?: string): Promise<void>;\n\n  // Usage tracking\n  createUsageLog(log: InsertUsageLog): Promise<UsageLog>;\n  getUsageByUserAndDate(userId: string, date: string): Promise<UsageLog | undefined>;\n\n  // Instagram accounts\n  createInstagramAccount(account: InsertInstagramAccount): Promise<InstagramAccount>;\n  getInstagramAccountsByUser(userId: string): Promise<InstagramAccount[]>;\n  getActiveInstagramAccounts(userId: string): Promise<InstagramAccount[]>;\n  updateInstagramAccountSession(accountId: string, sessionData: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserQuotas(userId: string, dmsUsed: number, extractsUsed: number): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        dmsUsedToday: sql`${users.dmsUsedToday} + ${dmsUsed}`,\n        extractsUsedToday: sql`${users.extractsUsedToday} + ${extractsUsed}`,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async resetDailyQuotas(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        dmsUsedToday: 0,\n        extractsUsedToday: 0,\n        lastQuotaReset: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Upload operations\n  async createUpload(upload: InsertUpload): Promise<Upload> {\n    const [newUpload] = await db.insert(uploads).values(upload).returning();\n    return newUpload;\n  }\n\n  async getUploadsByUser(userId: string): Promise<Upload[]> {\n    return await db\n      .select()\n      .from(uploads)\n      .where(eq(uploads.userId, userId))\n      .orderBy(desc(uploads.createdAt));\n  }\n\n  async updateUploadStatus(uploadId: string, status: string): Promise<void> {\n    await db\n      .update(uploads)\n      .set({ status })\n      .where(eq(uploads.id, uploadId));\n  }\n\n  // Job operations\n  async createJob(job: InsertJob): Promise<Job> {\n    const [newJob] = await db.insert(jobs).values(job).returning();\n    return newJob;\n  }\n\n  async getJobsByUser(userId: string): Promise<Job[]> {\n    return await db\n      .select()\n      .from(jobs)\n      .where(eq(jobs.userId, userId))\n      .orderBy(desc(jobs.createdAt));\n  }\n\n  async getJobById(jobId: string): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, jobId));\n    return job;\n  }\n\n  async updateJobProgress(jobId: string, completed: number, failed: number): Promise<void> {\n    await db\n      .update(jobs)\n      .set({\n        completed,\n        failed,\n        updatedAt: new Date(),\n      })\n      .where(eq(jobs.id, jobId));\n  }\n\n  async updateJobStatus(jobId: string, status: string): Promise<void> {\n    await db\n      .update(jobs)\n      .set({\n        status,\n        updatedAt: new Date(),\n      })\n      .where(eq(jobs.id, jobId));\n  }\n\n  // Result operations\n  async createResult(result: InsertResult): Promise<Result> {\n    const [newResult] = await db.insert(results).values(result).returning();\n    return newResult;\n  }\n\n  async getResultsByJob(jobId: string): Promise<Result[]> {\n    return await db\n      .select()\n      .from(results)\n      .where(eq(results.jobId, jobId))\n      .orderBy(desc(results.createdAt));\n  }\n\n  async getRecentResults(userId: string, limit = 10): Promise<Result[]> {\n    return await db\n      .select({\n        id: results.id,\n        jobId: results.jobId,\n        domain: results.domain,\n        igHandle: results.igHandle,\n        confidence: results.confidence,\n        sourceUrl: results.sourceUrl,\n        status: results.status,\n        createdAt: results.createdAt,\n      })\n      .from(results)\n      .innerJoin(jobs, eq(results.jobId, jobs.id))\n      .where(eq(jobs.userId, userId))\n      .orderBy(desc(results.createdAt))\n      .limit(limit);\n  }\n\n  // Template operations\n  async createTemplate(template: InsertTemplate): Promise<Template> {\n    const [newTemplate] = await db.insert(templates).values(template).returning();\n    return newTemplate;\n  }\n\n  async getTemplatesByUser(userId: string): Promise<Template[]> {\n    return await db\n      .select()\n      .from(templates)\n      .where(and(eq(templates.userId, userId), eq(templates.isActive, true)))\n      .orderBy(desc(templates.createdAt));\n  }\n\n  async getTemplateById(templateId: string): Promise<Template | undefined> {\n    const [template] = await db.select().from(templates).where(eq(templates.id, templateId));\n    return template;\n  }\n\n  async updateTemplate(templateId: string, template: Partial<InsertTemplate>): Promise<void> {\n    await db\n      .update(templates)\n      .set({\n        ...template,\n        updatedAt: new Date(),\n      })\n      .where(eq(templates.id, templateId));\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await db\n      .update(templates)\n      .set({\n        isActive: false,\n        updatedAt: new Date(),\n      })\n      .where(eq(templates.id, templateId));\n  }\n\n  // Campaign operations\n  async createCampaign(campaign: InsertCampaign): Promise<Campaign> {\n    const [newCampaign] = await db.insert(campaigns).values(campaign).returning();\n    return newCampaign;\n  }\n\n  async getCampaignsByUser(userId: string): Promise<Campaign[]> {\n    return await db\n      .select()\n      .from(campaigns)\n      .where(eq(campaigns.userId, userId))\n      .orderBy(desc(campaigns.createdAt));\n  }\n\n  async getCampaignById(campaignId: string): Promise<Campaign | undefined> {\n    const [campaign] = await db.select().from(campaigns).where(eq(campaigns.id, campaignId));\n    return campaign;\n  }\n\n  async updateCampaignStatus(campaignId: string, status: string): Promise<void> {\n    await db\n      .update(campaigns)\n      .set({\n        status,\n        updatedAt: new Date(),\n      })\n      .where(eq(campaigns.id, campaignId));\n  }\n\n  async updateCampaignProgress(campaignId: string, sent: number, replied: number, interested: number, failed: number): Promise<void> {\n    await db\n      .update(campaigns)\n      .set({\n        sent,\n        replied,\n        interested,\n        failed,\n        updatedAt: new Date(),\n      })\n      .where(eq(campaigns.id, campaignId));\n  }\n\n  // DM Queue operations\n  async createDmQueueItem(item: InsertDmQueue): Promise<DmQueue> {\n    const [newItem] = await db.insert(dmQueue).values(item).returning();\n    return newItem;\n  }\n\n  async getDmQueueByCampaign(campaignId: string): Promise<DmQueue[]> {\n    return await db\n      .select()\n      .from(dmQueue)\n      .where(eq(dmQueue.campaignId, campaignId))\n      .orderBy(desc(dmQueue.createdAt));\n  }\n\n  async updateDmQueueStatus(itemId: string, status: string, errorMessage?: string): Promise<void> {\n    await db\n      .update(dmQueue)\n      .set({\n        status,\n        errorMessage,\n        sentAt: status === 'sent' ? new Date() : undefined,\n      })\n      .where(eq(dmQueue.id, itemId));\n  }\n\n  // Usage tracking\n  async createUsageLog(log: InsertUsageLog): Promise<UsageLog> {\n    const [newLog] = await db.insert(usageLog).values(log).returning();\n    return newLog;\n  }\n\n  async getUsageByUserAndDate(userId: string, date: string): Promise<UsageLog | undefined> {\n    const [usage] = await db\n      .select()\n      .from(usageLog)\n      .where(and(eq(usageLog.userId, userId), eq(usageLog.date, date)));\n    return usage;\n  }\n\n  // Instagram accounts\n  async createInstagramAccount(account: InsertInstagramAccount): Promise<InstagramAccount> {\n    const [newAccount] = await db.insert(instagramAccounts).values(account).returning();\n    return newAccount;\n  }\n\n  async getInstagramAccountsByUser(userId: string): Promise<InstagramAccount[]> {\n    return await db\n      .select()\n      .from(instagramAccounts)\n      .where(eq(instagramAccounts.userId, userId))\n      .orderBy(desc(instagramAccounts.createdAt));\n  }\n\n  async getActiveInstagramAccounts(userId: string): Promise<InstagramAccount[]> {\n    return await db\n      .select()\n      .from(instagramAccounts)\n      .where(and(eq(instagramAccounts.userId, userId), eq(instagramAccounts.isActive, true)))\n      .orderBy(desc(instagramAccounts.lastUsed));\n  }\n\n  async updateInstagramAccountSession(accountId: string, sessionData: string): Promise<void> {\n    await db\n      .update(instagramAccounts)\n      .set({\n        sessionData,\n        lastUsed: new Date(),\n      })\n      .where(eq(instagramAccounts.id, accountId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11436},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  plan: varchar(\"plan\").default(\"free\"), // free, starter, pro, agency\n  planRenewalAt: timestamp(\"plan_renewal_at\"),\n  dailyDmQuota: integer(\"daily_dm_quota\").default(10),\n  dailyExtractQuota: integer(\"daily_extract_quota\").default(150),\n  dmsUsedToday: integer(\"dms_used_today\").default(0),\n  extractsUsedToday: integer(\"extracts_used_today\").default(0),\n  lastQuotaReset: timestamp(\"last_quota_reset\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// CSV Upload jobs\nexport const uploads = pgTable(\"uploads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  filename: varchar(\"filename\").notNull(),\n  rows: integer(\"rows\").notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, processing, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Background processing jobs\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  uploadId: varchar(\"upload_id\").references(() => uploads.id),\n  type: varchar(\"type\").notNull(), // extraction, dm_campaign\n  status: varchar(\"status\").default(\"pending\"), // pending, running, completed, failed\n  total: integer(\"total\").default(0),\n  completed: integer(\"completed\").default(0),\n  failed: integer(\"failed\").default(0),\n  meta: jsonb(\"meta\"), // Additional job data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Extraction results\nexport const results = pgTable(\"results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").references(() => jobs.id).notNull(),\n  domain: varchar(\"domain\").notNull(),\n  igHandle: varchar(\"ig_handle\"),\n  confidence: decimal(\"confidence\", { precision: 5, scale: 2 }),\n  sourceUrl: text(\"source_url\"),\n  status: varchar(\"status\").default(\"found\"), // found, not_found, error\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// DM Templates\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  content: text(\"content\").notNull(),\n  spintaxVariations: integer(\"spintax_variations\").default(3),\n  sendRate: varchar(\"send_rate\").default(\"moderate\"), // conservative, moderate, aggressive\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// DM Campaigns\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  templateId: varchar(\"template_id\").references(() => templates.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  status: varchar(\"status\").default(\"draft\"), // draft, scheduled, running, paused, completed, failed\n  totalHandles: integer(\"total_handles\").default(0),\n  sent: integer(\"sent\").default(0),\n  replied: integer(\"replied\").default(0),\n  interested: integer(\"interested\").default(0),\n  failed: integer(\"failed\").default(0),\n  scheduledAt: timestamp(\"scheduled_at\"),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// DM Queue\nexport const dmQueue = pgTable(\"dm_queue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id).notNull(),\n  igHandle: varchar(\"ig_handle\").notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, sent, replied, interested, not_fit, failed\n  scheduledAt: timestamp(\"scheduled_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Usage tracking\nexport const usageLog = pgTable(\"usage_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  date: varchar(\"date\").notNull(), // YYYY-MM-DD format\n  dmsUsed: integer(\"dms_used\").default(0),\n  extractsUsed: integer(\"extracts_used\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Instagram accounts for multi-account support\nexport const instagramAccounts = pgTable(\"instagram_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  username: varchar(\"username\").notNull(),\n  sessionData: text(\"session_data\"), // Encrypted session cookies\n  isActive: boolean(\"is_active\").default(true),\n  lastUsed: timestamp(\"last_used\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Upload = typeof uploads.$inferSelect;\nexport type Job = typeof jobs.$inferSelect;\nexport type Result = typeof results.$inferSelect;\nexport type Template = typeof templates.$inferSelect;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type DmQueue = typeof dmQueue.$inferSelect;\nexport type UsageLog = typeof usageLog.$inferSelect;\nexport type InstagramAccount = typeof instagramAccounts.$inferSelect;\n\n// Insert schemas\nexport const insertUploadSchema = createInsertSchema(uploads).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertResultSchema = createInsertSchema(results).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDmQueueSchema = createInsertSchema(dmQueue).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUsageLogSchema = createInsertSchema(usageLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInstagramAccountSchema = createInsertSchema(instagramAccounts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUpload = z.infer<typeof insertUploadSchema>;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type InsertResult = z.infer<typeof insertResultSchema>;\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type InsertDmQueue = z.infer<typeof insertDmQueueSchema>;\nexport type InsertUsageLog = z.infer<typeof insertUsageLogSchema>;\nexport type InsertInstagramAccount = z.infer<typeof insertInstagramAccountSchema>;\n","size_bytes":7954},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport CampaignsPage from \"@/pages/campaigns\";\nimport ExtractionsPage from \"@/pages/extractions\";\nimport TemplatesPage from \"@/pages/templates\";\nimport AccountsPage from \"@/pages/accounts\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/campaigns\" component={CampaignsPage} />\n          <Route path=\"/extractions\" component={ExtractionsPage} />\n          <Route path=\"/templates\" component={TemplatesPage} />\n          <Route path=\"/accounts\" component={AccountsPage} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1543},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%, 0.5);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(271, 81%, 56%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(271, 81%, 56%);\n  --chart-1: hsl(271, 81%, 56%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(240, 10%, 3.9%, 0.5);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(271, 81%, 56%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(240, 3.7%, 15.9%);\n  --sidebar-accent-foreground: hsl(271, 81%, 56%);\n  --sidebar-border: hsl(205, 25%, 90.6%);\n  --sidebar-ring: hsl(271, 81%, 56%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1rem;\n  --neon-green: hsl(120, 100%, 50%);\n  --neon-pink: hsl(320, 100%, 50%);\n  --neon-blue: hsl(200, 100%, 50%);\n  --neon-purple: hsl(280, 100%, 70%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%, 0.5);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(271, 81%, 56%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(271, 81%, 56%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, \n      hsl(240, 10%, 3.9%) 0%, \n      hsl(260, 15%, 8%) 25%, \n      hsl(280, 20%, 6%) 50%, \n      hsl(300, 25%, 8%) 75%, \n      hsl(240, 10%, 3.9%) 100%);\n    background-attachment: fixed;\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .glass-card {\n    @apply bg-white/5 backdrop-blur-xl border border-white/10;\n  }\n\n  .neon-border {\n    border: 1px solid;\n    border-image: linear-gradient(45deg, #8B5CF6, #EC4899, #3B82F6) 1;\n  }\n\n  .progress-bar {\n    background: linear-gradient(90deg, #8B5CF6 0%, #EC4899 50%, #00FF88 100%);\n    border-radius: 9999px;\n    transition: width 0.5s ease-in-out;\n  }\n\n  .hover-glow:hover {\n    box-shadow: 0 0 30px rgba(139, 92, 246, 0.6);\n    transform: translateY(-2px);\n    transition: all 0.3s ease;\n  }\n\n  .text-gradient {\n    background: linear-gradient(135deg, #8B5CF6, #EC4899, #3B82F6);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n}\n\n@layer utilities {\n  .animate-pulse-slow {\n    animation: pulse 3s ease-in-out infinite;\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  @keyframes glow {\n    0% { box-shadow: 0 0 20px rgba(139, 92, 246, 0.5); }\n    100% { box-shadow: 0 0 30px rgba(139, 92, 246, 0.8); }\n  }\n}\n","size_bytes":4082},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ActiveCampaigns.tsx":{"content":"import { Campaign } from \"@shared/schema\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface ActiveCampaignsProps {\n  campaigns: Campaign[];\n  isLoading: boolean;\n}\n\nexport default function ActiveCampaigns({ campaigns, isLoading }: ActiveCampaignsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const startCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      const response = await apiRequest(\"POST\", `/api/campaigns/${campaignId}/start`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Campaign Started\",\n        description: \"Your campaign is now running! 🚀\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Failed to Start Campaign\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const pauseCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      const response = await apiRequest(\"POST\", `/api/campaigns/${campaignId}/pause`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Campaign Paused\",\n        description: \"Your campaign has been paused\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Failed to Pause Campaign\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-3xl font-bold text-foreground flex items-center\">\n            <i className=\"fas fa-rocket text-primary mr-3\"></i>\n            Active Campaigns\n          </h2>\n        </div>\n        <div className=\"glass-card rounded-2xl p-6 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n        </div>\n      </section>\n    );\n  }\n\n  const activeCampaigns = campaigns.filter(c => c.status !== 'completed' && c.status !== 'failed');\n\n  return (\n    <section className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold text-foreground flex items-center\">\n          <i className=\"fas fa-rocket text-primary mr-3\"></i>\n          Active Campaigns\n        </h2>\n        <button className=\"glass-card px-4 py-2 rounded-xl text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"button-filter-campaigns\">\n          <i className=\"fas fa-filter mr-2\"></i>Filter\n        </button>\n      </div>\n\n      {activeCampaigns.length === 0 ? (\n        <div className=\"glass-card rounded-2xl p-8 text-center\">\n          <div className=\"w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center mb-4 opacity-50\">\n            <i className=\"fas fa-paper-plane text-white text-2xl\"></i>\n          </div>\n          <h3 className=\"text-xl font-bold text-foreground mb-2\">No Active Campaigns</h3>\n          <p className=\"text-muted-foreground mb-4\">Create your first DM campaign to start engaging with Instagram influencers!</p>\n          <button className=\"bg-gradient-to-r from-primary to-pink-500 text-primary-foreground px-6 py-3 rounded-xl font-medium hover:opacity-90 transition-opacity\" data-testid=\"button-create-first-campaign\">\n            <i className=\"fas fa-plus mr-2\"></i>Create Campaign\n          </button>\n        </div>\n      ) : (\n        activeCampaigns.map((campaign) => (\n          <div key={campaign.id} className=\"glass-card rounded-2xl p-6 space-y-4\" data-testid={`campaign-${campaign.id}`}>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-green-500 to-emerald-400 flex items-center justify-center\">\n                  <i className=\"fas fa-bullseye text-white\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground\" data-testid={`campaign-name-${campaign.id}`}>\n                    {campaign.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Created {campaign.createdAt ? new Date(campaign.createdAt).toLocaleDateString() : 'Unknown'} • {campaign.totalHandles || 0} handles\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                  campaign.status === 'running' \n                    ? 'bg-green-500/20 text-green-400' \n                    : campaign.status === 'scheduled'\n                    ? 'bg-blue-500/20 text-blue-400'\n                    : 'bg-yellow-500/20 text-yellow-400'\n                }`} data-testid={`campaign-status-${campaign.id}`}>\n                  <i className={`fas ${\n                    campaign.status === 'running' \n                      ? 'fa-play' \n                      : campaign.status === 'scheduled'\n                      ? 'fa-clock'\n                      : 'fa-pause'\n                  } mr-1`}></i>\n                  {campaign.status}\n                </span>\n                <button className=\"text-muted-foreground hover:text-foreground\" data-testid={`campaign-menu-${campaign.id}`}>\n                  <i className=\"fas fa-ellipsis-v\"></i>\n                </button>\n              </div>\n            </div>\n\n            {/* Campaign Progress */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-400\" data-testid={`campaign-sent-${campaign.id}`}>\n                  {campaign.sent || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Sent</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-400\" data-testid={`campaign-replied-${campaign.id}`}>\n                  {campaign.replied || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Replied</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-400\" data-testid={`campaign-interested-${campaign.id}`}>\n                  {campaign.interested || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Interested</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-400\" data-testid={`campaign-failed-${campaign.id}`}>\n                  {campaign.failed || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Failed</div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Progress</span>\n                <span className=\"text-foreground\">\n                  {campaign.sent || 0} / {campaign.totalHandles || 0}\n                </span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-3\">\n                <div \n                  className=\"progress-bar h-3 rounded-full\" \n                  style={{ \n                    width: (campaign.totalHandles || 0) > 0 \n                      ? `${Math.min(((campaign.sent || 0) / (campaign.totalHandles || 1)) * 100, 100)}%` \n                      : '0%' \n                  }}\n                  data-testid={`campaign-progress-${campaign.id}`}\n                ></div>\n              </div>\n            </div>\n\n            <div className=\"flex space-x-3\">\n              {campaign.status === 'running' ? (\n                <button \n                  className=\"flex-1 glass-card py-2 px-4 rounded-xl text-sm font-medium hover:bg-white/10 transition-colors disabled:opacity-50\"\n                  onClick={() => pauseCampaignMutation.mutate(campaign.id)}\n                  disabled={pauseCampaignMutation.isPending}\n                  data-testid={`button-pause-${campaign.id}`}\n                >\n                  <i className=\"fas fa-pause mr-2\"></i>Pause\n                </button>\n              ) : (\n                <button \n                  className=\"flex-1 bg-gradient-to-r from-green-500 to-emerald-400 text-white py-2 px-4 rounded-xl text-sm font-medium hover:opacity-90 transition-opacity disabled:opacity-50\"\n                  onClick={() => startCampaignMutation.mutate(campaign.id)}\n                  disabled={startCampaignMutation.isPending}\n                  data-testid={`button-start-${campaign.id}`}\n                >\n                  <i className=\"fas fa-play mr-2\"></i>Start Now\n                </button>\n              )}\n              <button className=\"flex-1 glass-card py-2 px-4 rounded-xl text-sm font-medium hover:bg-white/10 transition-colors\" data-testid={`button-analytics-${campaign.id}`}>\n                <i className=\"fas fa-chart-bar mr-2\"></i>Analytics\n              </button>\n              <button className=\"flex-1 glass-card py-2 px-4 rounded-xl text-sm font-medium hover:bg-white/10 transition-colors\" data-testid={`button-export-${campaign.id}`}>\n                <i className=\"fas fa-download mr-2\"></i>Export\n              </button>\n            </div>\n          </div>\n        ))\n      )}\n    </section>\n  );\n}\n","size_bytes":10575},"client/src/components/Navigation.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\n\nexport default function Navigation() {\n  const { user } = useAuth();\n\n  return (\n    <header className=\"sticky top-0 z-50 glass-card border-b border-border/50\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <nav className=\"flex items-center justify-between\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3 cursor-pointer\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-pink-500 flex items-center justify-center\">\n                <i className=\"fas fa-paper-plane text-white text-lg\"></i>\n              </div>\n              <span className=\"text-xl font-bold text-gradient\">IGExtract Pro</span>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/dashboard\">\n              <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-dashboard\">\n                Dashboard\n              </a>\n            </Link>\n            <Link href=\"/campaigns\">\n              <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-campaigns\">\n                Campaigns\n              </a>\n            </Link>\n            <Link href=\"/templates\">\n              <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-templates\">\n                Templates\n              </a>\n            </Link>\n            <Link href=\"/accounts\">\n              <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-accounts\">\n                Accounts\n              </a>\n            </Link>\n            {user && (\n              <div className=\"flex items-center space-x-2 glass-card px-3 py-1.5 rounded-full\" data-testid=\"user-info\">\n                <div className=\"w-2 h-2 bg-neon-green rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"user-email\">\n                  {(user as any)?.email || 'User'}\n                </span>\n              </div>\n            ) as React.ReactNode}\n            <a \n              href=\"/api/logout\" \n              className=\"text-muted-foreground hover:text-foreground transition-colors text-sm\"\n              data-testid=\"nav-logout\"\n            >\n              Logout\n            </a>\n          </div>\n\n          {/* Mobile menu button */}\n          <button className=\"md:hidden glass-card p-2 rounded-lg\" data-testid=\"button-mobile-menu\">\n            <i className=\"fas fa-bars text-foreground\"></i>\n          </button>\n        </nav>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2728},"client/src/components/QuickActions.tsx":{"content":"import { useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function QuickActions() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('csv', file);\n      const response = await apiRequest(\"POST\", \"/api/extractions/upload\", formData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Upload Successful\",\n        description: `Processing ${data.domains?.length || 0} domains. You'll see results soon!`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/extractions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload CSV file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExtractUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {\n        toast({\n          title: \"Invalid File\",\n          description: \"Please upload a CSV file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      uploadMutation.mutate(file);\n    }\n  };\n\n  const handleDMCampaign = () => {\n    // Navigate to campaigns page or open modal\n    toast({\n      title: \"Coming Soon!\",\n      description: \"Campaign builder is being developed 🚧\",\n    });\n  };\n\n  return (\n    <section className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <div className=\"glass-card rounded-2xl p-8 hover-glow\" data-testid=\"card-extract-action\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-blue-500 to-cyan-400 flex items-center justify-center animate-float\">\n            <i className=\"fas fa-file-csv text-white text-2xl\"></i>\n          </div>\n          <h3 className=\"text-2xl font-bold text-foreground\">Extract IG Handles</h3>\n          <p className=\"text-muted-foreground\">Upload a CSV of websites and we'll extract Instagram handles automatically ⚡</p>\n          <button \n            className=\"w-full bg-gradient-to-r from-blue-500 to-cyan-400 text-white py-3 px-6 rounded-xl font-semibold hover:scale-105 transition-transform disabled:opacity-50 disabled:cursor-not-allowed\"\n            onClick={handleExtractUpload}\n            disabled={uploadMutation.isPending}\n            data-testid=\"button-upload-csv\"\n          >\n            <i className=\"fas fa-upload mr-2\"></i>\n            {uploadMutation.isPending ? 'Uploading...' : 'Upload CSV'}\n          </button>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileChange}\n            className=\"hidden\"\n            data-testid=\"input-file-csv\"\n          />\n        </div>\n      </div>\n\n      <div className=\"glass-card rounded-2xl p-8 hover-glow\" data-testid=\"card-campaign-action\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center animate-float\" style={{ animationDelay: '0.5s' }}>\n            <i className=\"fas fa-paper-plane text-white text-2xl\"></i>\n          </div>\n          <h3 className=\"text-2xl font-bold text-foreground\">Build DM Campaign</h3>\n          <p className=\"text-muted-foreground\">Create personalized DM templates and manage your outreach campaigns 💬</p>\n          <button \n            className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-3 px-6 rounded-xl font-semibold hover:scale-105 transition-transform\"\n            onClick={handleDMCampaign}\n            data-testid=\"button-create-campaign\"\n          >\n            <i className=\"fas fa-plus mr-2\"></i>Create Campaign\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4723},"client/src/components/QuotaCards.tsx":{"content":"import { User } from \"@shared/schema\";\n\ninterface QuotaCardsProps {\n  user: User;\n}\n\nexport default function QuotaCards({ user }: QuotaCardsProps) {\n  const extractionPercentage = (user.dailyExtractQuota || 0) > 0 \n    ? ((user.extractsUsedToday || 0) / (user.dailyExtractQuota || 1)) * 100 \n    : 0;\n    \n  const dmPercentage = (user.dailyDmQuota || 0) > 0 \n    ? ((user.dmsUsedToday || 0) / (user.dailyDmQuota || 1)) * 100 \n    : 0;\n\n  const planPricing = {\n    free: '$0',\n    starter: '$55/mo',\n    pro: '$87/mo',\n    agency: '$155/mo'\n  };\n\n  return (\n    <section className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n      <div className=\"glass-card rounded-2xl p-6 hover-glow\" data-testid=\"card-extractions\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 to-cyan-400 flex items-center justify-center\">\n              <i className=\"fas fa-download text-white\"></i>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\">Extractions</h3>\n              <p className=\"text-sm text-muted-foreground\">Daily Quota</p>\n            </div>\n          </div>\n          <span className=\"text-2xl font-bold text-gradient\" data-testid=\"text-extractions-used\">\n            {user.extractsUsedToday || 0}\n          </span>\n        </div>\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Used</span>\n            <span className=\"text-foreground\">\n              <span data-testid=\"text-extractions-used-detail\">{user.extractsUsedToday || 0}</span> / <span data-testid=\"text-extractions-limit\">{user.dailyExtractQuota || 150}</span>\n            </span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"progress-bar h-2 rounded-full\" \n              style={{ width: `${Math.min(extractionPercentage, 100)}%` }}\n              data-testid=\"progress-extractions\"\n            ></div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"glass-card rounded-2xl p-6 hover-glow\" data-testid=\"card-dms\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center\">\n              <i className=\"fas fa-paper-plane text-white\"></i>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\">DMs Sent</h3>\n              <p className=\"text-sm text-muted-foreground\">Daily Quota</p>\n            </div>\n          </div>\n          <span className=\"text-2xl font-bold text-gradient\" data-testid=\"text-dms-used\">\n            {user.dmsUsedToday || 0}\n          </span>\n        </div>\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Used</span>\n            <span className=\"text-foreground\">\n              <span data-testid=\"text-dms-used-detail\">{user.dmsUsedToday || 0}</span> / <span data-testid=\"text-dms-limit\">{user.dailyDmQuota || 10}</span>\n            </span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"progress-bar h-2 rounded-full\" \n              style={{ width: `${Math.min(dmPercentage, 100)}%` }}\n              data-testid=\"progress-dms\"\n            ></div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"glass-card rounded-2xl p-6 hover-glow\" data-testid=\"card-plan\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-green-500 to-emerald-400 flex items-center justify-center\">\n              <i className=\"fas fa-crown text-white\"></i>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\">Current Plan</h3>\n              <p className=\"text-sm text-muted-foreground capitalize\" data-testid=\"text-plan-name\">\n                {user.plan || 'Free'} Plan\n              </p>\n            </div>\n          </div>\n          <span className=\"text-lg font-bold text-neon-green\" data-testid=\"text-plan-price\">\n            {planPricing[user.plan as keyof typeof planPricing] || '$0'}\n          </span>\n        </div>\n        <button className=\"w-full bg-gradient-to-r from-primary to-pink-500 text-primary-foreground py-2 px-4 rounded-xl font-medium hover:opacity-90 transition-opacity\" data-testid=\"button-upgrade\">\n          Upgrade to Pro 🎉\n        </button>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4855},"client/src/components/RecentResults.tsx":{"content":"import { Result } from \"@shared/schema\";\n\ninterface RecentResultsProps {\n  results: Result[];\n  isLoading: boolean;\n}\n\nexport default function RecentResults({ results, isLoading }: RecentResultsProps) {\n  if (isLoading) {\n    return (\n      <section className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-3xl font-bold text-foreground flex items-center\">\n            <i className=\"fas fa-chart-line text-primary mr-3\"></i>\n            Recent Extractions\n          </h2>\n        </div>\n        <div className=\"glass-card rounded-2xl p-6 flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold text-foreground flex items-center\">\n          <i className=\"fas fa-chart-line text-primary mr-3\"></i>\n          Recent Extractions\n        </h2>\n        <button className=\"glass-card px-4 py-2 rounded-xl text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"button-view-all-results\">\n          <i className=\"fas fa-eye mr-2\"></i>View All\n        </button>\n      </div>\n\n      {results.length === 0 ? (\n        <div className=\"glass-card rounded-2xl p-8 text-center\">\n          <div className=\"w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-blue-500 to-cyan-400 flex items-center justify-center mb-4 opacity-50\">\n            <i className=\"fas fa-search text-white text-2xl\"></i>\n          </div>\n          <h3 className=\"text-xl font-bold text-foreground mb-2\">No Extractions Yet</h3>\n          <p className=\"text-muted-foreground mb-4\">Upload a CSV file to start extracting Instagram handles from websites!</p>\n          <button className=\"bg-gradient-to-r from-blue-500 to-cyan-400 text-white px-6 py-3 rounded-xl font-medium hover:scale-105 transition-transform\" data-testid=\"button-upload-first-csv\">\n            <i className=\"fas fa-upload mr-2\"></i>Upload CSV\n          </button>\n        </div>\n      ) : (\n        <div className=\"glass-card rounded-2xl overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-white/5\">\n                <tr>\n                  <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Domain</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">IG Handle</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Confidence</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Status</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-border/50\">\n                {results.map((result) => (\n                  <tr key={result.id} className=\"hover:bg-white/5 transition-colors\" data-testid={`result-row-${result.id}`}>\n                    <td className=\"p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-400 flex items-center justify-center\">\n                          <i className=\"fas fa-globe text-white text-xs\"></i>\n                        </div>\n                        <span className=\"font-medium text-foreground\" data-testid={`result-domain-${result.id}`}>\n                          {result.domain}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"p-4\">\n                      {result.igHandle ? (\n                        <a \n                          href={`https://instagram.com/${result.igHandle.replace('@', '')}`} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-primary hover:text-primary/80 font-medium\"\n                          data-testid={`result-handle-${result.id}`}\n                        >\n                          {result.igHandle}\n                        </a>\n                      ) : (\n                        <span className=\"text-muted-foreground\">Not found</span>\n                      )}\n                    </td>\n                    <td className=\"p-4\">\n                      {result.confidence && parseFloat(result.confidence) > 0 ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-12 bg-muted rounded-full h-2\">\n                            <div \n                              className={`h-2 rounded-full ${\n                                parseFloat(result.confidence) >= 80 \n                                  ? 'bg-green-500' \n                                  : parseFloat(result.confidence) >= 60 \n                                  ? 'bg-yellow-500' \n                                  : 'bg-red-500'\n                              }`}\n                              style={{ width: `${Math.min(parseFloat(result.confidence), 100)}%` }}\n                            ></div>\n                          </div>\n                          <span className={`text-sm font-medium ${\n                            parseFloat(result.confidence) >= 80 \n                              ? 'text-green-400' \n                              : parseFloat(result.confidence) >= 60 \n                              ? 'text-yellow-400' \n                              : 'text-red-400'\n                          }`} data-testid={`result-confidence-${result.id}`}>\n                            {parseFloat(result.confidence).toFixed(0)}%\n                          </span>\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground\">N/A</span>\n                      )}\n                    </td>\n                    <td className=\"p-4\">\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                        result.status === 'found' \n                          ? 'bg-green-500/20 text-green-400' \n                          : result.status === 'not_found'\n                          ? 'bg-yellow-500/20 text-yellow-400'\n                          : 'bg-red-500/20 text-red-400'\n                      }`} data-testid={`result-status-${result.id}`}>\n                        {result.status === 'found' ? 'Verified' : result.status === 'not_found' ? 'Not Found' : 'Error'}\n                      </span>\n                    </td>\n                    <td className=\"p-4\">\n                      <div className=\"flex space-x-2\">\n                        {result.sourceUrl && (\n                          <a \n                            href={result.sourceUrl} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            className=\"text-primary hover:text-primary/80\"\n                            data-testid={`result-source-${result.id}`}\n                          >\n                            <i className=\"fas fa-external-link-alt\"></i>\n                          </a>\n                        )}\n                        {result.igHandle && (\n                          <button className=\"text-muted-foreground hover:text-foreground\" data-testid={`result-add-${result.id}`}>\n                            <i className=\"fas fa-plus\"></i>\n                          </button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n}\n","size_bytes":7899},"client/src/components/TemplateBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst templateSchema = z.object({\n  name: z.string().min(1, \"Template name is required\"),\n  content: z.string().min(10, \"Message content must be at least 10 characters\"),\n  spintaxVariations: z.number().min(1).max(20),\n  sendRate: z.enum([\"conservative\", \"moderate\", \"aggressive\"]),\n});\n\ntype TemplateForm = z.infer<typeof templateSchema>;\n\nexport default function TemplateBuilder() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [previewContent, setPreviewContent] = useState(\"\");\n\n  const form = useForm<TemplateForm>({\n    resolver: zodResolver(templateSchema),\n    defaultValues: {\n      name: \"\",\n      content: \"\",\n      spintaxVariations: 3,\n      sendRate: \"moderate\",\n    },\n  });\n\n  // Fetch existing templates\n  const { data: templates, isLoading: templatesLoading } = useQuery({\n    queryKey: ['/api/templates'],\n    retry: false,\n  });\n\n  // Create template mutation\n  const createTemplateMutation = useMutation({\n    mutationFn: async (templateData: TemplateForm) => {\n      const response = await apiRequest(\"POST\", \"/api/templates\", templateData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template Created\",\n        description: \"Your DM template has been saved successfully! 🎉\",\n      });\n      form.reset();\n      setPreviewContent(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Failed to Create Template\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: TemplateForm) => {\n    createTemplateMutation.mutate(data);\n  };\n\n  const handleContentChange = (content: string) => {\n    form.setValue(\"content\", content);\n    \n    // Generate preview with sample data\n    const preview = content\n      .replace(/\\{\\{name\\}\\}/g, \"Sarah\")\n      .replace(/\\{\\{topic\\}\\}/g, \"fitness nutrition\")\n      .replace(/\\{\\{brand\\}\\}/g, \"FitLife\")\n      .replace(/\\{\\{followers\\}\\}/g, \"25.3K\");\n    \n    setPreviewContent(preview);\n  };\n\n  const insertPlaceholder = (placeholder: string) => {\n    const currentContent = form.getValues(\"content\");\n    const newContent = currentContent + `{{${placeholder}}}`;\n    handleContentChange(newContent);\n  };\n\n  return (\n    <section className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold text-foreground flex items-center\">\n          <i className=\"fas fa-edit text-primary mr-3\"></i>\n          DM Template Builder\n        </h2>\n        <Button className=\"bg-gradient-to-r from-primary to-pink-500 hover:opacity-90\" data-testid=\"button-new-template\">\n          <i className=\"fas fa-plus mr-2\"></i>New Template\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Template Form */}\n        <Card className=\"glass-card border-border\">\n          <CardHeader>\n            <CardTitle>Create Template</CardTitle>\n            <CardDescription>\n              Design personalized DM templates with placeholders and spintax variations\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Template Name</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"e.g., Fitness Influencer Outreach\"\n                  {...form.register(\"name\")}\n                  data-testid=\"input-template-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-destructive text-sm mt-1\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"content\">Message Template</Label>\n                <div className=\"space-y-2\">\n                  <div className=\"flex flex-wrap gap-2 text-xs\">\n                    {[\"name\", \"topic\", \"brand\", \"followers\"].map((placeholder) => (\n                      <button\n                        key={placeholder}\n                        type=\"button\"\n                        onClick={() => insertPlaceholder(placeholder)}\n                        className=\"px-2 py-1 bg-primary/20 text-primary rounded hover:bg-primary/30 transition-colors\"\n                        data-testid={`button-placeholder-${placeholder}`}\n                      >\n                        {`{{${placeholder}}}`}\n                      </button>\n                    ))}\n                  </div>\n                  <Textarea\n                    id=\"content\"\n                    rows={6}\n                    placeholder=\"Hey {{name}}! 👋 I love your content about {{topic}}. I'm reaching out because...\"\n                    {...form.register(\"content\")}\n                    onChange={(e) => handleContentChange(e.target.value)}\n                    data-testid=\"textarea-template-content\"\n                  />\n                </div>\n                {form.formState.errors.content && (\n                  <p className=\"text-destructive text-sm mt-1\">{form.formState.errors.content.message}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"spintaxVariations\">Spintax Variations</Label>\n                  <Select\n                    value={form.watch(\"spintaxVariations\").toString()}\n                    onValueChange={(value) => form.setValue(\"spintaxVariations\", parseInt(value))}\n                  >\n                    <SelectTrigger data-testid=\"select-spintax-variations\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"3\">3 variations</SelectItem>\n                      <SelectItem value=\"5\">5 variations</SelectItem>\n                      <SelectItem value=\"10\">10 variations</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"sendRate\">Send Rate</Label>\n                  <Select\n                    value={form.watch(\"sendRate\")}\n                    onValueChange={(value) => form.setValue(\"sendRate\", value as \"conservative\" | \"moderate\" | \"aggressive\")}\n                  >\n                    <SelectTrigger data-testid=\"select-send-rate\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"conservative\">Conservative (1/hour)</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate (3/hour)</SelectItem>\n                      <SelectItem value=\"aggressive\">Aggressive (5/hour)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1 bg-gradient-to-r from-primary to-pink-500 hover:opacity-90\"\n                  disabled={createTemplateMutation.isPending}\n                  data-testid=\"button-save-template\"\n                >\n                  <i className=\"fas fa-save mr-2\"></i>\n                  {createTemplateMutation.isPending ? 'Saving...' : 'Save Template'}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  data-testid=\"button-test-template\"\n                >\n                  <i className=\"fas fa-paper-plane mr-2\"></i>Test Send\n                </Button>\n              </div>\n            </form>\n\n            {/* Preview */}\n            {previewContent && (\n              <Card className=\"border border-green-500/20 bg-green-500/5\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-green-400 text-sm flex items-center\">\n                    <i className=\"fas fa-eye mr-2\"></i>Preview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground italic\" data-testid=\"text-template-preview\">\n                    \"{previewContent}\"\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Existing Templates */}\n        <Card className=\"glass-card border-border\">\n          <CardHeader>\n            <CardTitle>Saved Templates</CardTitle>\n            <CardDescription>\n              Manage your existing DM templates\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {templatesLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin w-6 h-6 border-4 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : (templates as any[]) && (templates as any[]).length > 0 ? (\n              <div className=\"space-y-4\">\n                {(templates as any[]).map((template: any) => (\n                  <div key={template.id} className=\"glass-card rounded-xl p-4 space-y-2\" data-testid={`template-${template.id}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium text-foreground\" data-testid={`template-name-${template.id}`}>\n                        {template.name}\n                      </h4>\n                      <div className=\"flex space-x-2\">\n                        <button className=\"text-muted-foreground hover:text-foreground\" data-testid={`button-edit-${template.id}`}>\n                          <i className=\"fas fa-edit\"></i>\n                        </button>\n                        <button className=\"text-muted-foreground hover:text-red-400\" data-testid={`button-delete-${template.id}`}>\n                          <i className=\"fas fa-trash\"></i>\n                        </button>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`template-content-${template.id}`}>\n                      {template.content}\n                    </p>\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>{template.spintaxVariations} variations</span>\n                      <span className=\"capitalize\">{template.sendRate} rate</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <div className=\"w-12 h-12 mx-auto rounded-xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center mb-4 opacity-50\">\n                  <i className=\"fas fa-edit text-white\"></i>\n                </div>\n                <p className=\"text-muted-foreground\">No templates yet. Create your first template!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12374},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useAuth } from './useAuth';\n\nexport interface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket() {\n  const { user, isAuthenticated } = useAuth();\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n\n  useEffect(() => {\n    if (!isAuthenticated || !user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      // Authenticate with user ID\n      if (user && 'id' in user) {\n        ws.current?.send(JSON.stringify({\n          type: 'authenticate',\n          userId: (user as any).id\n        }));\n      }\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      ws.current?.close();\n    };\n  }, [isAuthenticated, user]);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage\n  };\n}\n","size_bytes":1681},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/accounts.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWebSocket } from '@/hooks/useWebSocket';\n\nexport default function AccountsPage() {\n  const [newUsername, setNewUsername] = useState('');\n  const [sessionCookies, setSessionCookies] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { sendMessage } = useWebSocket();\n\n  // Fetch Instagram accounts\n  const { data: accounts = [], isLoading } = useQuery({\n    queryKey: ['/api/instagram-accounts'],\n    retry: false,\n  });\n\n  // Create new Instagram account\n  const createAccountMutation = useMutation({\n    mutationFn: async (data: { username: string; sessionData?: string }) => {\n      return apiRequest('POST', '/api/instagram-accounts', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account Added\",\n        description: \"Instagram account has been added successfully!\",\n      });\n      setNewUsername('');\n      setSessionCookies('');\n      setShowAddForm(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/instagram-accounts'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Add Account\",\n        description: error.message || \"Could not add Instagram account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle account status\n  const toggleAccountMutation = useMutation({\n    mutationFn: async ({ accountId, isActive }: { accountId: string; isActive: boolean }) => {\n      return apiRequest('PATCH', `/api/instagram-accounts/${accountId}`, { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/instagram-accounts'] });\n      toast({\n        title: \"Account Updated\",\n        description: \"Account status has been updated.\",\n      });\n    },\n  });\n\n  // Delete account\n  const deleteAccountMutation = useMutation({\n    mutationFn: async (accountId: string) => {\n      return apiRequest('DELETE', `/api/instagram-accounts/${accountId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/instagram-accounts'] });\n      toast({\n        title: \"Account Removed\",\n        description: \"Instagram account has been removed.\",\n      });\n    },\n  });\n\n  const handleAddAccount = () => {\n    if (!newUsername.trim()) {\n      toast({\n        title: \"Username Required\",\n        description: \"Please enter an Instagram username\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAccountMutation.mutate({\n      username: newUsername.trim(),\n      sessionData: sessionCookies.trim() || undefined\n    });\n  };\n\n  const handleToggleAccount = (accountId: string, isActive: boolean) => {\n    toggleAccountMutation.mutate({ accountId, isActive });\n  };\n\n  const handleDeleteAccount = (accountId: string) => {\n    if (confirm('Are you sure you want to remove this Instagram account?')) {\n      deleteAccountMutation.mutate(accountId);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"h-screen flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl font-bold text-gradient\">\n            <i className=\"fas fa-users text-primary mr-3\"></i>\n            Instagram Accounts\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Manage your Instagram accounts for automation campaigns. Add session cookies to maintain login state.\n          </p>\n        </div>\n\n        {/* Add Account Button */}\n        <div className=\"text-center\">\n          <Button \n            onClick={() => setShowAddForm(!showAddForm)}\n            className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n            data-testid=\"button-add-account\"\n          >\n            <i className=\"fas fa-plus mr-2\"></i>\n            Add Instagram Account\n          </Button>\n        </div>\n\n        {/* Add Account Form */}\n        {showAddForm && (\n          <Card className=\"glass-card p-6 max-w-lg mx-auto\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"username\" className=\"text-sm font-medium\">\n                  Instagram Username\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"@your_instagram_handle\"\n                  value={newUsername}\n                  onChange={(e) => setNewUsername(e.target.value)}\n                  className=\"mt-1\"\n                  data-testid=\"input-username\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Enter without the @ symbol\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"session-cookies\" className=\"text-sm font-medium\">\n                  Session Cookies (Optional)\n                </Label>\n                <Input\n                  id=\"session-cookies\"\n                  type=\"text\"\n                  placeholder=\"sessionid=abc123; csrftoken=def456...\"\n                  value={sessionCookies}\n                  onChange={(e) => setSessionCookies(e.target.value)}\n                  className=\"mt-1\"\n                  data-testid=\"input-session-cookies\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Paste your Instagram session cookies to stay logged in\n                </p>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button \n                  onClick={handleAddAccount}\n                  disabled={createAccountMutation.isPending}\n                  className=\"flex-1\"\n                  data-testid=\"button-save-account\"\n                >\n                  {createAccountMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                      Adding...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-save mr-2\"></i>\n                      Add Account\n                    </>\n                  )}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowAddForm(false)}\n                  data-testid=\"button-cancel-add\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </Card>\n        )}\n\n        {/* Accounts List */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {(accounts as any[]).length === 0 ? (\n            <div className=\"col-span-full text-center py-12\">\n              <div className=\"text-6xl text-muted-foreground mb-4\">\n                <i className=\"fas fa-instagram\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">No Instagram Accounts</h3>\n              <p className=\"text-muted-foreground max-w-md mx-auto\">\n                Add your Instagram accounts to start running DM campaigns and manage multiple profiles.\n              </p>\n            </div>\n          ) : (\n            (accounts as any[]).map((account: any) => (\n              <Card key={account.id} className=\"glass-card p-6\" data-testid={`account-card-${account.id}`}>\n                <div className=\"space-y-4\">\n                  {/* Account Header */}\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-pink-500 to-orange-500 rounded-full flex items-center justify-center\">\n                        <i className=\"fas fa-instagram text-white text-xl\"></i>\n                      </div>\n                      <div>\n                        <h3 className=\"font-bold text-lg\" data-testid={`account-username-${account.id}`}>\n                          @{account.username}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {account.sessionData ? 'Session Saved' : 'No Session'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={account.isActive}\n                        onCheckedChange={(checked) => handleToggleAccount(account.id, checked)}\n                        data-testid={`account-toggle-${account.id}`}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Account Stats */}\n                  <div className=\"grid grid-cols-2 gap-4 py-4 border-t border-b border-muted\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-400\" data-testid={`account-campaigns-${account.id}`}>\n                        {account.campaignsCount || 0}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Campaigns</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-400\" data-testid={`account-messages-${account.id}`}>\n                        {account.messagesSent || 0}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Messages Sent</div>\n                    </div>\n                  </div>\n\n                  {/* Account Actions */}\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"flex-1\"\n                      onClick={() => {\n                        // Update session cookies functionality\n                        const newCookies = prompt('Enter new session cookies:', account.sessionData || '');\n                        if (newCookies !== null) {\n                          // Update account with new cookies\n                          console.log('Update cookies for', account.id, newCookies);\n                        }\n                      }}\n                      data-testid={`account-update-${account.id}`}\n                    >\n                      <i className=\"fas fa-cookie-bite mr-2\"></i>\n                      Update Session\n                    </Button>\n                    <Button \n                      variant=\"destructive\" \n                      size=\"sm\"\n                      onClick={() => handleDeleteAccount(account.id)}\n                      data-testid={`account-delete-${account.id}`}\n                    >\n                      <i className=\"fas fa-trash mr-2\"></i>\n                      Remove\n                    </Button>\n                  </div>\n\n                  {/* Status Indicator */}\n                  <div className=\"flex items-center justify-center\">\n                    <span className={`px-3 py-1 rounded-full text-xs font-medium flex items-center ${\n                      account.isActive \n                        ? 'bg-green-500/20 text-green-400' \n                        : 'bg-gray-500/20 text-gray-400'\n                    }`}>\n                      <div className={`w-2 h-2 rounded-full mr-2 ${\n                        account.isActive ? 'bg-green-400' : 'bg-gray-400'\n                      }`}></div>\n                      {account.isActive ? 'Active' : 'Inactive'}\n                    </span>\n                  </div>\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Help Section */}\n        <Card className=\"glass-card p-6\">\n          <div className=\"space-y-4\">\n            <h3 className=\"text-xl font-bold text-foreground flex items-center\">\n              <i className=\"fas fa-info-circle text-blue-400 mr-3\"></i>\n              How to Get Session Cookies\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Chrome/Edge:</h4>\n                <ol className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>1. Go to Instagram.com and log in</li>\n                  <li>2. Press F12 to open Developer Tools</li>\n                  <li>3. Go to Application → Cookies → instagram.com</li>\n                  <li>4. Copy sessionid and csrftoken values</li>\n                  <li>5. Format: sessionid=value; csrftoken=value;</li>\n                </ol>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Firefox:</h4>\n                <ol className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>1. Go to Instagram.com and log in</li>\n                  <li>2. Press F12 to open Developer Tools</li>\n                  <li>3. Go to Storage → Cookies → instagram.com</li>\n                  <li>4. Copy sessionid and csrftoken values</li>\n                  <li>5. Paste in the session cookies field above</li>\n                </ol>\n              </div>\n            </div>\n            <div className=\"bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <i className=\"fas fa-exclamation-triangle text-yellow-400 mt-0.5\"></i>\n                <div className=\"text-sm\">\n                  <p className=\"text-yellow-300 font-medium\">Important:</p>\n                  <p className=\"text-yellow-200\">\n                    Session cookies allow the app to send DMs on your behalf without requiring you to log in each time. \n                    Keep these secure and never share them with others.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14771},"client/src/pages/campaigns.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport ActiveCampaigns from \"@/components/ActiveCampaigns\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function CampaignsPage() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Fetch campaigns\n  const { data: campaigns, isLoading: campaignsLoading } = useQuery({\n    queryKey: ['/api/campaigns'],\n    retry: false,\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20\">\n      <Navigation />\n      \n      <main className=\"container mx-auto px-4 py-8 space-y-8\">\n        <section className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl md:text-6xl font-black text-gradient mb-4\">\n            🚀 Your Campaigns\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Manage and monitor your Instagram DM campaigns in real-time ⚡\n          </p>\n        </section>\n\n        <ActiveCampaigns \n          campaigns={(campaigns as any[]) || []} \n          isLoading={campaignsLoading} \n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":1995},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect, useRef } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport QuotaCards from \"@/components/QuotaCards\";\nimport QuickActions from \"@/components/QuickActions\";\nimport ActiveCampaigns from \"@/components/ActiveCampaigns\";\nimport RecentResults from \"@/components/RecentResults\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Dashboard() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const { lastMessage } = useWebSocket();\n  const queryClient = useQueryClient();\n\n  // Handle real-time updates\n  useEffect(() => {\n    if (lastMessage) {\n      switch (lastMessage.type) {\n        case 'job_progress':\n        case 'job_completed':\n          queryClient.invalidateQueries({ queryKey: ['/api/extractions'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/results/recent'] });\n          break;\n        case 'campaign_progress':\n        case 'campaign_completed':\n          queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n          break;\n      }\n    }\n  }, [lastMessage, queryClient]);\n\n  // Fetch user campaigns\n  const { data: campaigns, isLoading: campaignsLoading } = useQuery({\n    queryKey: ['/api/campaigns'],\n    retry: false,\n  });\n\n  // Fetch recent results\n  const { data: recentResults, isLoading: resultsLoading } = useQuery({\n    queryKey: ['/api/results/recent'],\n    retry: false,\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20\">\n      <Navigation />\n      \n      <main className=\"container mx-auto px-4 py-8 space-y-8\">\n        {/* Welcome Section */}\n        <section className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl md:text-6xl font-black text-gradient mb-4\" data-testid=\"text-welcome\">\n            🚀 Welcome Back!\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Extract Instagram handles and manage DM campaigns like a pro. Your Gen Z marketing toolkit awaits! ✨\n          </p>\n        </section>\n\n        {/* Quota Cards */}\n        <QuotaCards user={user as any} />\n\n        {/* Quick Actions */}\n        <QuickActions />\n\n        {/* Active Campaigns */}\n        <ActiveCampaigns \n          campaigns={(campaigns as any[]) || []} \n          isLoading={campaignsLoading} \n        />\n\n        {/* Recent Results */}\n        <RecentResults \n          results={(recentResults as any[]) || []} \n          isLoading={resultsLoading} \n        />\n\n        {/* Analytics Section */}\n        <section className=\"space-y-6\">\n          <h2 className=\"text-3xl font-bold text-foreground flex items-center\">\n            <i className=\"fas fa-chart-line text-primary mr-3\"></i>\n            Analytics Overview\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"glass-card rounded-2xl p-6 text-center hover-glow\" data-testid=\"card-analytics-views\">\n              <div className=\"w-12 h-12 mx-auto rounded-xl bg-gradient-to-br from-blue-500 to-cyan-400 flex items-center justify-center mb-4\">\n                <i className=\"fas fa-eye text-white\"></i>\n              </div>\n              <div className=\"text-2xl font-bold text-blue-400\" data-testid=\"text-total-extractions\">\n                {(user as any)?.extractsUsedToday || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Extractions</div>\n            </div>\n\n            <div className=\"glass-card rounded-2xl p-6 text-center hover-glow\" data-testid=\"card-analytics-dms\">\n              <div className=\"w-12 h-12 mx-auto rounded-xl bg-gradient-to-br from-green-500 to-emerald-400 flex items-center justify-center mb-4\">\n                <i className=\"fas fa-paper-plane text-white\"></i>\n              </div>\n              <div className=\"text-2xl font-bold text-green-400\" data-testid=\"text-total-dms\">\n                {(user as any)?.dmsUsedToday || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">DMs Sent Today</div>\n            </div>\n\n            <div className=\"glass-card rounded-2xl p-6 text-center hover-glow\" data-testid=\"card-analytics-campaigns\">\n              <div className=\"w-12 h-12 mx-auto rounded-xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center mb-4\">\n                <i className=\"fas fa-bullseye text-white\"></i>\n              </div>\n              <div className=\"text-2xl font-bold text-purple-400\" data-testid=\"text-active-campaigns\">\n                {(campaigns as any[])?.filter((c: any) => c.status === 'running').length || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Active Campaigns</div>\n            </div>\n\n            <div className=\"glass-card rounded-2xl p-6 text-center hover-glow\" data-testid=\"card-analytics-plan\">\n              <div className=\"w-12 h-12 mx-auto rounded-xl bg-gradient-to-br from-orange-500 to-red-400 flex items-center justify-center mb-4\">\n                <i className=\"fas fa-crown text-white\"></i>\n              </div>\n              <div className=\"text-2xl font-bold text-orange-400 capitalize\" data-testid=\"text-user-plan\">\n                {(user as any)?.plan || 'free'}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Current Plan</div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <button className=\"w-14 h-14 bg-gradient-to-r from-primary to-pink-500 rounded-full shadow-2xl hover:scale-110 transition-transform animate-glow flex items-center justify-center\" data-testid=\"button-floating-action\">\n          <i className=\"fas fa-plus text-white text-xl\"></i>\n        </button>\n      </div>\n\n      {/* Mobile Bottom Navigation */}\n      <nav className=\"fixed bottom-0 left-0 right-0 md:hidden glass-card border-t border-border/50 z-40\">\n        <div className=\"flex justify-around py-2\">\n          <button className=\"flex flex-col items-center p-3 text-primary\" data-testid=\"nav-home\">\n            <i className=\"fas fa-home text-lg\"></i>\n            <span className=\"text-xs mt-1\">Home</span>\n          </button>\n          <button className=\"flex flex-col items-center p-3 text-muted-foreground\" data-testid=\"nav-analytics\">\n            <i className=\"fas fa-chart-bar text-lg\"></i>\n            <span className=\"text-xs mt-1\">Analytics</span>\n          </button>\n          <button className=\"flex flex-col items-center p-3 text-muted-foreground\" data-testid=\"nav-campaigns\">\n            <i className=\"fas fa-paper-plane text-lg\"></i>\n            <span className=\"text-xs mt-1\">Campaigns</span>\n          </button>\n          <button className=\"flex flex-col items-center p-3 text-muted-foreground\" data-testid=\"nav-profile\">\n            <i className=\"fas fa-user text-lg\"></i>\n            <span className=\"text-xs mt-1\">Profile</span>\n          </button>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","size_bytes":8016},"client/src/pages/extractions.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport RecentResults from \"@/components/RecentResults\";\nimport QuickActions from \"@/components/QuickActions\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ExtractionsPage() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Fetch extractions\n  const { data: extractions, isLoading: extractionsLoading } = useQuery({\n    queryKey: ['/api/extractions'],\n    retry: false,\n  });\n\n  // Fetch all results\n  const { data: results, isLoading: resultsLoading } = useQuery({\n    queryKey: ['/api/results/recent'],\n    retry: false,\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20\">\n      <Navigation />\n      \n      <main className=\"container mx-auto px-4 py-8 space-y-8\">\n        <section className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl md:text-6xl font-black text-gradient mb-4\">\n            🔍 Instagram Extractions\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Upload CSV files and extract Instagram handles automatically ✨\n          </p>\n        </section>\n\n        <QuickActions />\n\n        {/* Extraction Jobs Status */}\n        {(extractions as any[]) && (extractions as any[]).length > 0 && (\n          <section className=\"space-y-6\">\n            <h2 className=\"text-3xl font-bold text-foreground flex items-center\">\n              <i className=\"fas fa-cog text-primary mr-3\"></i>\n              Extraction Jobs\n            </h2>\n            \n            <div className=\"grid grid-cols-1 gap-4\">\n              {(extractions as any[]).map((job: any) => (\n                <div key={job.id} className=\"glass-card rounded-2xl p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">\n                        Extraction Job #{job.id.slice(-8)}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(job.createdAt).toLocaleString()} • {job.total} domains\n                      </p>\n                    </div>\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                      job.status === 'completed' \n                        ? 'bg-green-500/20 text-green-400' \n                        : job.status === 'running'\n                        ? 'bg-blue-500/20 text-blue-400'\n                        : job.status === 'failed'\n                        ? 'bg-red-500/20 text-red-400'\n                        : 'bg-yellow-500/20 text-yellow-400'\n                    }`}>\n                      {job.status}\n                    </span>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Progress</span>\n                      <span className=\"text-foreground\">\n                        {job.completed + job.failed} / {job.total}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className=\"progress-bar h-2 rounded-full\" \n                        style={{ \n                          width: job.total > 0 \n                            ? `${Math.min(((job.completed + job.failed) / job.total) * 100, 100)}%` \n                            : '0%' \n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4 mt-4 text-center\">\n                    <div>\n                      <div className=\"text-lg font-bold text-green-400\">{job.completed}</div>\n                      <div className=\"text-xs text-muted-foreground\">Completed</div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-red-400\">{job.failed}</div>\n                      <div className=\"text-xs text-muted-foreground\">Failed</div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-blue-400\">{job.total - job.completed - job.failed}</div>\n                      <div className=\"text-xs text-muted-foreground\">Remaining</div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n        )}\n\n        <RecentResults \n          results={(results as any[]) || []} \n          isLoading={resultsLoading} \n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":5641},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 glass-card border-b border-border/50\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <nav className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-pink-500 flex items-center justify-center\">\n                <i className=\"fas fa-paper-plane text-white text-lg\"></i>\n              </div>\n              <span className=\"text-xl font-bold text-gradient\">IGExtract Pro</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/api/login\">\n                <button className=\"bg-gradient-to-r from-primary to-pink-500 text-primary-foreground px-6 py-2 rounded-xl font-medium hover:opacity-90 transition-opacity\" data-testid=\"button-login\">\n                  Get Started 🚀\n                </button>\n              </Link>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"container mx-auto px-4 py-16\">\n        <section className=\"text-center space-y-8 mb-16\">\n          <h1 className=\"text-4xl md:text-7xl font-black text-gradient mb-6\">\n            Instagram DM<br />\n            Automation Made<br />\n            <span className=\"text-neon-green\">Easy</span> ✨\n          </h1>\n          <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n            Extract Instagram handles from websites and automate your DM campaigns like a pro. \n            The Gen Z marketing toolkit that gets results! 💪\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mt-8\">\n            <Link href=\"/api/login\">\n              <button className=\"bg-gradient-to-r from-primary to-pink-500 text-primary-foreground px-8 py-4 rounded-2xl font-bold text-lg hover:scale-105 transition-transform shadow-2xl\" data-testid=\"button-start-free\">\n                <i className=\"fas fa-rocket mr-2\"></i>\n                Start Free Today\n              </button>\n            </Link>\n            <div className=\"flex items-center space-x-2 text-muted-foreground\">\n              <i className=\"fas fa-check text-neon-green\"></i>\n              <span>No credit card required</span>\n            </div>\n          </div>\n        </section>\n\n        {/* Features */}\n        <section className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          <div className=\"glass-card rounded-2xl p-8 text-center hover-glow\">\n            <div className=\"w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-blue-500 to-cyan-400 flex items-center justify-center mb-6 animate-float\">\n              <i className=\"fas fa-search text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-4\">Smart Extraction</h3>\n            <p className=\"text-muted-foreground\">\n              Upload a CSV of websites and we'll automatically find Instagram handles with high accuracy.\n            </p>\n          </div>\n\n          <div className=\"glass-card rounded-2xl p-8 text-center hover-glow\">\n            <div className=\"w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center mb-6 animate-float\" style={{ animationDelay: '0.5s' }}>\n              <i className=\"fas fa-paper-plane text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-4\">DM Automation</h3>\n            <p className=\"text-muted-foreground\">\n              Create personalized DM templates with spintax variations and automate your outreach.\n            </p>\n          </div>\n\n          <div className=\"glass-card rounded-2xl p-8 text-center hover-glow\">\n            <div className=\"w-16 h-16 mx-auto rounded-2xl bg-gradient-to-br from-green-500 to-emerald-400 flex items-center justify-center mb-6 animate-float\" style={{ animationDelay: '1s' }}>\n              <i className=\"fas fa-chart-line text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-bold text-foreground mb-4\">Real-time Analytics</h3>\n            <p className=\"text-muted-foreground\">\n              Track your campaigns with live progress updates and detailed analytics.\n            </p>\n          </div>\n        </section>\n\n        {/* Pricing */}\n        <section className=\"text-center space-y-8\">\n          <h2 className=\"text-4xl font-bold text-foreground\">\n            Choose Your Plan 💎\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 max-w-6xl mx-auto\">\n            {/* Free Plan */}\n            <div className=\"glass-card rounded-2xl p-6 border border-border\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-xl font-bold text-foreground\">Free</h3>\n                <div className=\"text-3xl font-black text-gradient mt-2\">$0</div>\n                <div className=\"text-sm text-muted-foreground\">Forever</div>\n              </div>\n              <ul className=\"space-y-3 text-sm text-muted-foreground mb-6\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  150 extractions/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  10 DMs/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  Basic templates\n                </li>\n              </ul>\n              <Link href=\"/api/login\">\n                <button className=\"w-full glass-card py-3 rounded-xl font-medium hover:bg-white/10 transition-colors\" data-testid=\"button-plan-free\">\n                  Get Started\n                </button>\n              </Link>\n            </div>\n\n            {/* Starter Plan */}\n            <div className=\"glass-card rounded-2xl p-6 border border-border\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-xl font-bold text-foreground\">Starter</h3>\n                <div className=\"text-3xl font-black text-gradient mt-2\">$55</div>\n                <div className=\"text-sm text-muted-foreground\">/month</div>\n              </div>\n              <ul className=\"space-y-3 text-sm text-muted-foreground mb-6\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  200 extractions/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  200 DMs/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  Advanced templates\n                </li>\n              </ul>\n              <Link href=\"/api/login\">\n                <button className=\"w-full glass-card py-3 rounded-xl font-medium hover:bg-white/10 transition-colors\" data-testid=\"button-plan-starter\">\n                  Choose Plan\n                </button>\n              </Link>\n            </div>\n\n            {/* Pro Plan */}\n            <div className=\"glass-card rounded-2xl p-6 border-2 border-primary relative\">\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <span className=\"bg-gradient-to-r from-primary to-pink-500 text-white px-4 py-1 rounded-full text-xs font-bold\">\n                  POPULAR\n                </span>\n              </div>\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-xl font-bold text-foreground\">Pro</h3>\n                <div className=\"text-3xl font-black text-gradient mt-2\">$87</div>\n                <div className=\"text-sm text-muted-foreground\">/month</div>\n              </div>\n              <ul className=\"space-y-3 text-sm text-muted-foreground mb-6\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  330 extractions/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  330 DMs/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  DM scheduling\n                </li>\n              </ul>\n              <Link href=\"/api/login\">\n                <button className=\"w-full bg-gradient-to-r from-primary to-pink-500 text-primary-foreground py-3 rounded-xl font-medium hover:opacity-90 transition-opacity\" data-testid=\"button-plan-pro\">\n                  Choose Plan\n                </button>\n              </Link>\n            </div>\n\n            {/* Agency Plan */}\n            <div className=\"glass-card rounded-2xl p-6 border border-border\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-xl font-bold text-foreground\">Agency</h3>\n                <div className=\"text-3xl font-black text-gradient mt-2\">$155</div>\n                <div className=\"text-sm text-muted-foreground\">/month</div>\n              </div>\n              <ul className=\"space-y-3 text-sm text-muted-foreground mb-6\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  500 extractions/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  500 DMs/day\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-neon-green mr-2\"></i>\n                  Multi-account support\n                </li>\n              </ul>\n              <Link href=\"/api/login\">\n                <button className=\"w-full glass-card py-3 rounded-xl font-medium hover:bg-white/10 transition-colors\" data-testid=\"button-plan-agency\">\n                  Choose Plan\n                </button>\n              </Link>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"container mx-auto px-4 py-8 text-center\">\n        <div className=\"glass-card rounded-2xl p-6\">\n          <p className=\"text-muted-foreground\">\n            Ready to supercharge your Instagram marketing? 🔥\n          </p>\n          <Link href=\"/api/login\">\n            <button className=\"mt-4 bg-gradient-to-r from-primary to-pink-500 text-primary-foreground px-8 py-3 rounded-xl font-bold hover:scale-105 transition-transform\" data-testid=\"button-footer-cta\">\n              Get Started Now\n            </button>\n          </Link>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":11266},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/templates.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport TemplateBuilder from \"@/components/TemplateBuilder\";\n\nexport default function TemplatesPage() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-purple-900/20\">\n      <Navigation />\n      \n      <main className=\"container mx-auto px-4 py-8 space-y-8\">\n        <section className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl md:text-6xl font-black text-gradient mb-4\" data-testid=\"text-templates-title\">\n            ✨ DM Templates\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Create personalized DM templates with spintax variations and placeholders 🎯\n          </p>\n        </section>\n\n        <TemplateBuilder />\n      </main>\n    </div>\n  );\n}\n","size_bytes":1743},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}